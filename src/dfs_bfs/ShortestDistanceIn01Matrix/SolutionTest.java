package dfs_bfs.ShortestDistanceIn01Matrix;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;

public class SolutionTest {
    @Test
    public void test() {
        Solution s = new Solution();
        char[][] cc = new char[][] {
                {'0', '0', '0', '0', '0'},
                {'0', '1', '1', '1', '1'},
                {'0', '1', '1', '1', '1'},
                {'0', '1', '1', '1', '1'},
                {'0', '1', '1', '1', '1'},
                {'0', '0', '0', '0', '0'},
        };
        s.markBorders(cc);

        assertArrayEquals(new char[][] {
                {'0', '0', '0', '0', '0'},
                {'0', 'b', 'b', 'b', 'b'},
                {'0', 'b', '1', '1', 'b'},
                {'0', 'b', '1', '1', 'b'},
                {'0', 'b', 'b', 'b', 'b'},
                {'0', '0', '0', '0', '0'},
        }, cc);

        cc = new char[][] {
                {'0', '0', '0', '0', '0', '0', '0', '0'},
                {'0', '1', '1', '1', '1', '1', '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1'},
                {'0', '1', '1', '1', '0', '1', '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1'},
                {'0', '1', '1', '1', '1', '1', '1', '1'},
                {'0', '0', '0', '0', '0', '0', '0', '0'},
        };
        s.markBorders(cc);

        assertArrayEquals(new char[][] {
                {'0', '0', '0', '0', '0', '0', '0', '0'},
                {'0', 'b', 'b', 'b', 'b', 'b', 'b', 'b'},
                {'0', 'b', '1', '1', '1', '1', '1', 'b'},
                {'0', 'b', '1', '1', 'b', '1', '1', 'b'},
                {'0', 'b', '1', 'b', '0', 'b', '1', 'b'},
                {'0', 'b', '1', '1', 'b', '1', '1', 'b'},
                {'0', 'b', '1', '1', '1', '1', '1', 'b'},
                {'0', 'b', 'b', 'b', 'b', 'b', 'b', 'b'},
                {'0', '0', '0', '0', '0', '0', '0', '0'},
        }, cc);


        assertArrayEquals(new int[][] {
                        {0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 0, 1, 1, 1, 1, 1, 0},
                        {0, 0, 1, 1, 0, 1, 1, 0},
                        {0, 0, 1, 0, 0, 0, 1, 0},
                        {0, 0, 1, 1, 0, 1, 1, 0},
                        {0, 0, 1, 1, 1, 1, 1, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0},
                        {0, 0, 0, 0, 0, 0, 0, 0}},
                s.calcShortestDistance(new char[][] {
                        {'0', '0', '0', '0', '0', '0', '0', '0'},
                        {'0', 'b', 'b', 'b', 'b', 'b', 'b', 'b'},
                        {'0', 'b', '1', '1', '1', '1', '1', 'b'},
                        {'0', 'b', '1', '1', 'b', '1', '1', 'b'},
                        {'0', 'b', '1', 'b', '0', 'b', '1', 'b'},
                        {'0', 'b', '1', '1', 'b', '1', '1', 'b'},
                        {'0', 'b', '1', '1', '1', '1', '1', 'b'},
                        {'0', 'b', 'b', 'b', 'b', 'b', 'b', 'b'},
                        {'0', '0', '0', '0', '0', '0', '0', '0'}
                }));
    }
}